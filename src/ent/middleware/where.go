// Code generated by ent, DO NOT EDIT.

package middleware

import (
	"go-test/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// LID applies equality check predicate on the "l_id" field. It's identical to LIDEQ.
func LID(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLID), v))
	})
}

// DID applies equality check predicate on the "d_id" field. It's identical to DIDEQ.
func DID(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDID), v))
	})
}

// SysID applies equality check predicate on the "sys_id" field. It's identical to SysIDEQ.
func SysID(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSysID), v))
	})
}

// LIDEQ applies the EQ predicate on the "l_id" field.
func LIDEQ(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLID), v))
	})
}

// LIDNEQ applies the NEQ predicate on the "l_id" field.
func LIDNEQ(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLID), v))
	})
}

// LIDIn applies the In predicate on the "l_id" field.
func LIDIn(vs ...int) predicate.Middleware {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLID), v...))
	})
}

// LIDNotIn applies the NotIn predicate on the "l_id" field.
func LIDNotIn(vs ...int) predicate.Middleware {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLID), v...))
	})
}

// LIDGT applies the GT predicate on the "l_id" field.
func LIDGT(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLID), v))
	})
}

// LIDGTE applies the GTE predicate on the "l_id" field.
func LIDGTE(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLID), v))
	})
}

// LIDLT applies the LT predicate on the "l_id" field.
func LIDLT(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLID), v))
	})
}

// LIDLTE applies the LTE predicate on the "l_id" field.
func LIDLTE(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLID), v))
	})
}

// LIDIsNil applies the IsNil predicate on the "l_id" field.
func LIDIsNil() predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLID)))
	})
}

// LIDNotNil applies the NotNil predicate on the "l_id" field.
func LIDNotNil() predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLID)))
	})
}

// DIDEQ applies the EQ predicate on the "d_id" field.
func DIDEQ(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDID), v))
	})
}

// DIDNEQ applies the NEQ predicate on the "d_id" field.
func DIDNEQ(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDID), v))
	})
}

// DIDIn applies the In predicate on the "d_id" field.
func DIDIn(vs ...int) predicate.Middleware {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDID), v...))
	})
}

// DIDNotIn applies the NotIn predicate on the "d_id" field.
func DIDNotIn(vs ...int) predicate.Middleware {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDID), v...))
	})
}

// DIDGT applies the GT predicate on the "d_id" field.
func DIDGT(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDID), v))
	})
}

// DIDGTE applies the GTE predicate on the "d_id" field.
func DIDGTE(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDID), v))
	})
}

// DIDLT applies the LT predicate on the "d_id" field.
func DIDLT(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDID), v))
	})
}

// DIDLTE applies the LTE predicate on the "d_id" field.
func DIDLTE(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDID), v))
	})
}

// DIDIsNil applies the IsNil predicate on the "d_id" field.
func DIDIsNil() predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDID)))
	})
}

// DIDNotNil applies the NotNil predicate on the "d_id" field.
func DIDNotNil() predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDID)))
	})
}

// SysIDEQ applies the EQ predicate on the "sys_id" field.
func SysIDEQ(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSysID), v))
	})
}

// SysIDNEQ applies the NEQ predicate on the "sys_id" field.
func SysIDNEQ(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSysID), v))
	})
}

// SysIDIn applies the In predicate on the "sys_id" field.
func SysIDIn(vs ...int) predicate.Middleware {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSysID), v...))
	})
}

// SysIDNotIn applies the NotIn predicate on the "sys_id" field.
func SysIDNotIn(vs ...int) predicate.Middleware {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSysID), v...))
	})
}

// SysIDGT applies the GT predicate on the "sys_id" field.
func SysIDGT(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSysID), v))
	})
}

// SysIDGTE applies the GTE predicate on the "sys_id" field.
func SysIDGTE(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSysID), v))
	})
}

// SysIDLT applies the LT predicate on the "sys_id" field.
func SysIDLT(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSysID), v))
	})
}

// SysIDLTE applies the LTE predicate on the "sys_id" field.
func SysIDLTE(v int) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSysID), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Middleware) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Middleware) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Middleware) predicate.Middleware {
	return predicate.Middleware(func(s *sql.Selector) {
		p(s.Not())
	})
}
